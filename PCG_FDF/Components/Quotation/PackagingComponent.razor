@using PCG_ENTITIES.PCG
@using PCG_FDF.Data.Comparers
@using PCG_FDF.Data.ComponentDI
@using PCG_FDF.Data.ComponentDI.Quotation;
@using PCG_FDF.Data.DataAccess
@using PCG_FDF.Data.Localization
@inject QuotationDataCollection_LEGACY quotationService
@inject GlobalLocalizer localize
@inject GlobalBreakpointService BreakpointService
@implements IDisposable

<div class="card-wrapper">
    @if (elementData is not null)
    {
        <MudStack>
            <MudText Typo="@(BreakpointService.GetIsMobile() ? Typo.h4 : Typo.h6)" Color="Color.Primary">@elementData.GetElementName()</MudText>
            <MudStack Row="true">
                @if (elementData.GetChipFields() is not null && elementData.GetGuidFields() is not null)
                {
                    var f19_exclusions = elementData.GetFieldExclusions(19);
                    <div class="chipset-wrapper">
                        <MudChipSet ReadOnly="@quotationService.GetQuotationLocked()" MudChipEqualityComparer="@Comparer" ValueExpression="@(() => GetSelectedChip(19))" SelectedChip="@GetSelectedChip(19)" SelectedChipChanged="@(async (chip) => await ChipHasChanged(19, chip))" Class="chip-set-selector" Mandatory="true">
                            @if (!f19_exclusions.Contains(guid_pallet))
                            {
                                <SimpleChip Default="@(elementData.GetGuidFields()![19] == guid_pallet)" IconCSS="extra-large unconstrain" ChipTag="@guid_pallet" ChipIcon="@CustomIcons.pallet.GetIcon()" IconViewBox="@CustomIcons.pallet.GetViewBox()" ChipText="@localize.Get("quot_pack_pallet")"></SimpleChip>
                            }
                            @if (!f19_exclusions.Contains(guid_bulk))
                            {
                                <SimpleChip Default="@(elementData.GetGuidFields()![19] == guid_bulk)" IconCSS="extra-large unconstrain" ChipTag="@guid_bulk" ChipIcon="@CustomIcons.suelta.GetIcon()" IconViewBox="@CustomIcons.suelta.GetViewBox()" ChipText="@localize.Get("quot_pack_bulk")"></SimpleChip>
                            }
                        </MudChipSet>
                    </div>
                }
            </MudStack>
        </MudStack>
    }
    else
    {
        <MudStack Row="true">
            <MudGrid Class="skeleton-grid" Spacing="6" Justify="Justify.FlexStart">
                @for (int i = 0; i < 2; i++)
                {
                    <MudItem xs="2">
                        <MudSkeleton Height="60px" Width="150px" SkeletonType="SkeletonType.Rectangle" />
                    </MudItem>
                }
            </MudGrid>
        </MudStack>
    }
</div>

@code {
    private readonly int ELEMENT_ID = 12;
    private ElementQuotationData? elementData;
    private ChipUUIDComparer Comparer { get; } = new();
    private Guid guid_pallet = new Guid("62544187-7341-4072-A0A6-9FAB28C39439");
    private Guid guid_bulk = new Guid("DD28AB6B-143A-4DE6-ADFB-A878A31A36F1");

    protected async override Task OnInitializedAsync()
    {
        BreakpointService.OnChange += StateHasChanged;
        await BreakpointService.InitializeService();
        elementData = quotationService.GetElementQuotationData(ELEMENT_ID);
        elementData.ElementHasChips(new List<int>() { 19 });
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BreakpointService.ReCheckSize();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task ChipHasChanged(int id, MudChip chip)
    {
        await elementData!.SetChipValue(id, chip);
        await elementData!.SetGuidValue(id, (Guid)chip.Tag);
    }

    private MudChip? GetSelectedChip(int id)
    {
        return elementData!.GetChipFields()![id];
    }

    public void Dispose()
    {
        BreakpointService.OnChange -= StateHasChanged;
    }
}
