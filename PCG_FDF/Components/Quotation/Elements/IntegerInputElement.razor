@inherits QuotationElementBase

<div class="element-boundary">
    <MudStack Spacing="1">
        <MudStack Row="true">
            @if (ElementData.Element_Icon is not null && !SingleElement)
            {
                <MudIcon Size="Size.Medium" Icon="@ElementData.Element_Icon" ViewBox="@ElementData.Icon_ViewBox"></MudIcon>
            }
            @if (!SingleElement)
            {
                <MudText Typo="@(Breakpoint_Service.GetIsMobile() ? Typo.h5 : Typo.h6)" Class="title-text"><strong>@GetElementName()</strong></MudText>
                <MudText Typo="@(Breakpoint_Service.GetIsMobile() ? Typo.h5 : Typo.h6)" Class="title-text quotation-required-information"><strong>*</strong></MudText>
            }
        </MudStack>
        <MudNumericField Class="@($"numerical-input quotation-elements-mudnumericfield {(Breakpoint_Service.GetIsMobile() ? "increase-it" : "")}")"
                         T="int?"
                         Variant="Variant.Outlined"
                         Value="@TryGetStorageValue()"
                         ValueChanged="@(async (args) => await TryWriteStorageValue(args))"
                         Disabled="@GetElementReadonly()"
                         ReadOnly="@GetElementReadonly()"
                         Required="true"
                         Min="0"
                         RequiredError="@Localize.Get("errmsg_required")"
                         Placeholder="@($"{Localize.Get("placeholder_input")} {GetElementName()}")" />
    </MudStack>
</div>

@code {
    private int? TryGetStorageValue()
    {
        return Quotation_Data.GetElementValueAs<int?>(Card.Card_ID, ElementData.Element_ID);
    }

    private async Task TryWriteStorageValue(int? value)
    {
        await Quotation_Data.WriteSharedElementValue(value, Card.Card_ID, ElementData.Element_ID);
    }
}
