@using PCG_ENTITIES.PCG_FDF.UtilityEntities;
@using PCG_ENTITIES.Extensions;
@using PCG_FDF.Data.DataAccess;
@using PCG_FDF.Utility;
@inject PCG_FDF_DB DATA_ACCESS
@inherits QuotationElementBase

<div class="element-boundary">
    <MudStack Spacing="1">
        <MudStack Row="true">
            @if (ElementData.Element_Icon is not null && !SingleElement)
            {
                <MudIcon Size="Size.Medium" Icon="@ElementData.Element_Icon" ViewBox="@ElementData.Icon_ViewBox"></MudIcon>
            }
            @if (!SingleElement)
            {
                <MudText Typo="@(Breakpoint_Service.GetIsMobile() ? Typo.h5 : Typo.h6)" Class="title-text"><strong>@GetElementName()</strong></MudText>
                <MudText Typo="@(Breakpoint_Service.GetIsMobile() ? Typo.h5 : Typo.h6)" Class="title-text quotation-required-information"><strong>*</strong></MudText>
            }
        </MudStack>
        <MudAutocomplete T="KeyValueUUID"
                         Class="@($"quote-searchbar {(Breakpoint_Service.GetIsMobile() ? "resize-it" : "")}")"
                         PopoverClass="@($"quote-popover {(Breakpoint_Service.GetIsMobile() ? "resize-it" : "")}")"
                         ToStringFunc="@CustomConverter"
                         ResetValueOnEmptyText="false"
                         CoerceText="true"
                         CoerceValue="false"
                         AdornmentIcon="@Icons.Material.Filled.Search"
                         AdornmentColor="Color.Primary"
                         Required="true"
                         Clearable="false"
                         Value="@TryGetStorageValue()"
                         ValueChanged="@(async (args) => await TryWriteStorageValue(args))"
                         SearchFunc="@(async (args) => await SearchDynamicQuery(args))"
                         RequiredError="@Localize.Get("errmsg_required")"
                         Placeholder="@($"{Localize.Get("placeholder_select")} {GetElementName()}")" />
    </MudStack>
</div>

@code {
    private Func<KeyValueUUID, string> CustomConverter = kvp => kvp?.Value!;

    protected async override Task OnInitializedAsync()
    {
        if (ElementData.Preload_Value && ElementData.Preloaded_Value is not null)
        {
            await TryWriteStorageValue(GetPreloadedValueAs<KeyValueUUID>());
        }
        await base.OnInitializedAsync();
    }

    private async Task<IEnumerable<KeyValueUUID>> SearchDynamicQuery(string value)
    {
        var query_request = new DynamicQueryRequestQuotation()
            {
                Client_ID = Quotation_Data.Client_ID,
                User_ID = Quotation_Data.User_ID,
                Query_ID = ElementData.Query_ID!.Value,
                Language = LanguageUtil.Language.GetStringValue(),
                Query = value
            };
        var result = await DATA_ACCESS.PostLeerQuery(query_request);
        if (result is not null && result.Operation_Succeeded && result.Result is not null)
        {
            return result.Result;
        }
        else
        {
            return Enumerable.Empty<KeyValueUUID>();
        }
    }

    private async Task TryWriteStorageValue(KeyValueUUID? value)
    {
        await Quotation_Data.WriteSharedElementValue(value, Card.Card_ID, ElementData.Element_ID);
    }

    private KeyValueUUID? TryGetStorageValue()
    {
        return Quotation_Data.GetElementValueAs<KeyValueUUID?>(Card.Card_ID, ElementData.Element_ID);
    }
}
