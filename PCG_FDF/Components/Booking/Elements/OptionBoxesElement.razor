@using PCG_ENTITIES.PCG_FDF.UtilityEntities;
@using PCG_FDF.Data.Comparers;
@inherits BookingElementBase

<div class="element-boundary">
    <MudStack Spacing="1">
        <MudStack Row="true">
            @if (ElementData.Element_Icon is not null)
            {
                <MudIcon Size="Size.Medium" Icon="@ElementData.Element_Icon" ViewBox="@ElementData.Icon_ViewBox"></MudIcon>
            }
            <MudText Typo="@(BreakpointService.GetIsMobile() ? Typo.h5 : Typo.h6)" Class="title-text"><strong>@ElementData.Element_Name</strong></MudText>
            @if (ElementData.Required)
            {
                <MudText Typo="@(BreakpointService.GetIsMobile() ? Typo.h5 : Typo.h6)" Class="title-text booking-required-information"><strong>*</strong></MudText>
            }
        </MudStack>
        <div class="chipset-wrapper">
            <MudChipSet Class="chip-set-selector" MudChipEqualityComparer="@Comparer"
                        ValueExpression="@(() => TryGetStorageValue())"
                        SelectedChip="@TryGetStorageValue()"
                        SelectedChipChanged="@(async(args) => await TryWriteStorageValue(args))"
                        ReadOnly="@GetElementReadonly()"
                        Mandatory="@ElementData.Required" >
                @foreach (var chip_init_data in GetPreloadedListAs<OptionBox>())
                {
                    <SimpleChip IconCSS="extra-large-plus unconstrain"
                            ChipIcon="@chip_init_data.Icon"
                            IconViewBox="@chip_init_data.ViewBox"
                            ChipTag="@chip_init_data.Value_UUID"
                            ChipText="@chip_init_data.Value"></SimpleChip>
                }
            </MudChipSet>
        </div>
    </MudStack>
</div>

@code {
    private ChipUUIDComparer Comparer { get; } = new();

    protected override void OnInitialized()
    {
        // Unshared
        if (IsCollection)
        {
            BookingData.TryBindUnsharedChipset(SectionData.Key, SectionData.Value.Keys.First(), ElementData.Element_ID);
        }
        else
        {
            BookingData.TryBindSharedChipset(ElementData.Element_ID);
        }

        base.OnInitialized();
    }

    private MudChip? TryGetStorageValue()
    {
        // Unshared
        if (IsCollection)
        {
            return BookingData.GetUnsharedChip(SectionData.Key, SectionData.Value.Keys.First(), ElementData.Element_ID);
        }
        // Shared
        else
        {
            return BookingData.GetSharedChip(ElementData.Element_ID);
        }
    }

    private async Task TryWriteStorageValue(MudChip? value)
    {
        // Unshared
        if (IsCollection)
        {
            if (value is not null)
            {
                await BookingData.WriteUnsharedElementValue((Guid)value.Tag!, SectionData.Key, SectionData.Value.Keys.First(), ElementData.Element_ID);
            }
            else
            {
                await BookingData.WriteUnsharedElementValue(null, SectionData.Key, SectionData.Value.Keys.First(), ElementData.Element_ID);
            }
            BookingData.WriteUnsharedChip(value, SectionData.Key, SectionData.Value.Keys.First(), ElementData.Element_ID);
        }
        // Shared
        else
        {
            if (value is not null)
            {
                await BookingData.WriteSharedElementValue((Guid)value.Tag!, ElementData.Element_ID);
            }
            else
            {
                await BookingData.WriteSharedElementValue(null, ElementData.Element_ID);
            }
            BookingData.WriteSharedChip(value, ElementData.Element_ID);
        }
    }
}
