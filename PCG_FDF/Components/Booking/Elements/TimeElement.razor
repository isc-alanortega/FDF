@inherits BookingElementBase

<div class="element-boundary section-eelementtype-timeelement">
    <MudStack Spacing="1">
        <MudStack Row="true">
            @if (ElementData.Element_Icon is not null)
            {
                <MudIcon Size="Size.Medium" Icon="@ElementData.Element_Icon" ViewBox="@ElementData.Icon_ViewBox"></MudIcon>
            }
            <MudText Typo="@(BreakpointService.GetIsMobile() ? Typo.h5 : Typo.h6)" Class="title-text"><strong>@ElementData.Element_Name</strong></MudText>
            @if (ElementData.Required)
            {
                <MudText Typo="@(BreakpointService.GetIsMobile() ? Typo.h5 : Typo.h6)" Class="title-text booking-required-information"><strong>*</strong></MudText>
            }
        </MudStack>
        <MudTimePicker Required="@ElementData.Required"
                       RequiredError="@Localize.Get("errmsg_required")"
                       Disabled="@GetElementReadonly()"
                       ReadOnly="@GetElementReadonly()"
                       AmPm="true"
                       Time="@TryGetStorageValue()"
                       TimeChanged="@(async(args) => await TryWriteStorageValue(args))"
                       TimeFormat="hh:mm tt"
                       Placeholder="@($"{Localize.Get("placeholder_set")} {ElementData.Element_Name}")" />
    </MudStack>
</div>

@code {
    protected async override Task OnInitializedAsync()
    {
        if (ElementData.Preloaded_Value is not null)
        {
            if (TryGetStorageValue() is null)
            {
                var init_value = GetPreloadedValueAs<DateTime?>();
                await TryWriteStorageValue(init_value);
            }
        }
        await base.OnInitializedAsync();
    }

    private TimeSpan? TryGetStorageValue()
    {
        TimeSpan? time = null;
        DateTime? value = null;

        // Unshared
        if (IsCollection)
        {
            value = BookingData.GetUnsharedElementValueAs<DateTime?>(SectionData.Key, SectionData.Value.Keys.First(), ElementData.Element_ID);
        }
        // Shared
        else
        {
            value = BookingData.GetSharedElementValueAs<DateTime?>(ElementData.Element_ID);
        }

        if (value.HasValue)
        {
            time = new TimeSpan(value.Value.Hour, value.Value.Minute, 0);
        }

        return time;
    }

    private async Task TryWriteStorageValue(TimeSpan? value)
    {
        DateTime? data = null;

        if (value.HasValue)
        {
            data = DateTime.Today.AddHours(value.Value.Hours).AddMinutes(value.Value.Minutes);
        }

        // Unshared
        if (IsCollection)
        {
            await BookingData.WriteUnsharedElementValue(data, SectionData.Key, SectionData.Value.Keys.First(), ElementData.Element_ID);
        }
        // Shared
        else
        {
            await BookingData.WriteSharedElementValue(data, ElementData.Element_ID);
        }
    }

    private async Task TryWriteStorageValue(DateTime? value)
    {
        // Unshared
        if (IsCollection)
        {
            await BookingData.WriteUnsharedElementValue(value, SectionData.Key, SectionData.Value.Keys.First(), ElementData.Element_ID);
        }
        // Shared
        else
        {
            await BookingData.WriteSharedElementValue(value, ElementData.Element_ID);
        }
    }
}
