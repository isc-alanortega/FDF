@inherits MetadataElementBase

<div class="element-boundary">
    <MudStack Spacing="1">
        <MudStack Row="true">
            <MudText Typo="@(BreakpointService.GetIsMobile() ? Typo.h5 : Typo.h6)" Class="title-text"><strong>@MetadataData.Metadata_Name</strong></MudText>
            @if (MetadataData.Required)
            {
                <MudText Typo="@(BreakpointService.GetIsMobile() ? Typo.h5 : Typo.h6)" Class="title-text booking-required-information"><strong>*</strong></MudText>
            }
        </MudStack>
        <MudTextField Disabled="@GetElementReadonly()"
                      ReadOnly="@GetElementReadonly()"
                      DebounceInterval="1500"
                      T="string"
                      Value="@TryGetStorageValue()"
                      ValueChanged="@(async(args) => await TryWriteStorageValue(args))"
                      Variant="Variant.Outlined"
                      Required="@MetadataData.Required"
                      RequiredError="@Localize.Get("errmsg_required")" />
    </MudStack>
</div>

@code {
    private string? TryGetStorageValue()
    {
        // Unshared
        if (IsCollection)
        {
            return BookingData.GetUnsharedMetadataValueAs<string?>(SectionData.Key, SectionData.Value.Keys.First(), DocumentData.Document_Subtype_ID, MetadataData.Metadata_ID);
        }
        // Shared
        else
        {
            return BookingData.GetSharedMetadataValueAs<string?>(DocumentData.Document_Subtype_ID, MetadataData.Metadata_ID);
        }
    }

    private async Task TryWriteStorageValue(string value)
    {
        // Unshared
        if (IsCollection)
        {
            await BookingData.WriteUnsharedMetadataValue(value, SectionData.Key, SectionData.Value.Keys.First(), DocumentData.Document_Subtype_ID, MetadataData.Metadata_ID);
        }
        // Shared
        else
        {
            await BookingData.WriteSharedMetadataValue(value, DocumentData.Document_Subtype_ID, MetadataData.Metadata_ID);
        }
    }
}
